import{_ as i,o as p,c as r,a as n,b as a,w as t,d as e,e as o,r as l}from"./app.0e282d90.js";const c={},d=n("h1",{id:"streaming-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#streaming-api","aria-hidden":"true"},"#"),e(" Streaming API")],-1),u={class:"custom-container tip"},h=n("i",{class:"fas fa-info"},null,-1),m=n("p",null,"\uC774 \uBB38\uC11C\uB294 \uD604\uC7AC \uC601\uBB38\uC73C\uB85C \uC81C\uACF5\uB429\uB2C8\uB2E4.",-1),v=e("\uC77D\uAE30 \uC804\uC5D0, "),y=e("Misskey API \uBB38\uC11C"),k=e("\uB97C \uBA3C\uC800 \uC77D\uACE0 \uC640 \uC8FC\uC138\uC694."),g=o(`<p>The streaming API provides real-time information (e.g., new posts in the timeline, reactions, followers, etc.) and various other operations.</p><h2 id="connecting-to-the-stream" tabindex="-1"><a class="header-anchor" href="#connecting-to-the-stream" aria-hidden="true">#</a> Connecting to the stream.</h2><p>To use the streaming API, you have to connect to the Misskey server using <strong>websocket</strong>.</p><p>The websocket URL looks like this:</p><div class="language-text ext-text"><pre class="language-text"><code>wss://{host}/streaming?i={token}
</code></pre></div><p>where</p><ul><li><code>{host}</code> is the host of the instance you want to connect to.</li><li><code>{token}</code> is the users access token.</li></ul><div class="custom-container tip"><i class="fas fa-info"></i><p>You can also connect without the access token, but this will limit the information you receive and operations you can perform.</p></div><p>Once you are connected to the stream, you can subscribe to posts as described below, but at this stage you cannot, for example, receive new posts from your timeline.</p><p>To receive such events, you need to join a <strong>channel</strong> on the stream, as described below.</p><p><strong>All data should be encoded as JSON.</strong></p><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h2><p>Misskey&#39;s streaming API has the concept of channels. This is a mechanism for separating the information to be sent and received. By joining channels on the stream, you will be able to receive various kinds of information and send information.</p><div class="custom-container tip"><i class="fas fa-info"></i><p>You can join multiple channels simultaneously on a single stream connection.</p></div>`,14),b=e("The following sections describe how to use the channels. To see what channels are available, please refer to the "),f=e("Channel List"),x=e("."),w=o(`<h3 id="joining-a-channel" tabindex="-1"><a class="header-anchor" href="#joining-a-channel" aria-hidden="true">#</a> Joining a channel</h3><p>To join a channel, send the following JSON data on the stream:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">channel</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxxx&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>channel</code> is the name of the channel you want to connect to. The types of channels are described later in this section.</li><li><code>id</code> is an arbitrary ID for interacting with that channel. This is necessary to identify which channel the message is coming from, because a stream contains multiple channels. This ID can be something like a UUID or a random number.</li><li><code>params</code> are parameters required when joining a channel. Different channels require different parameters when connecting. When connecting to a channel that does not require parameters, this property can be omitted.</li></ul><div class="custom-container tip"><i class="fas fa-info"></i><p>The ID is not per channel but per channel connection, because a channel may be needed multiple times but with different parameters.</p></div><h3 id="receiving-messages-from-channels" tabindex="-1"><a class="header-anchor" href="#receiving-messages-from-channels" aria-hidden="true">#</a> Receiving messages from channels</h3><p>For example, a timeline channel will send out a message when there is a new post. By receiving the message, you will know in real time that a new post has been published on your timeline.</p><p>When a channel issues a message, the following JSON data is sent:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;channel&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;something&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">some</span><span class="token operator">:</span> <span class="token string">&#39;thing&#39;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>id</code> is the ID that you set when connecting to that channel as mentioned above. This lets you know from which channel (instantiation) this message is coming.</li><li><code>type</code> is the type of message. The types of messages that get sent depend on the channel.</li><li><code>body</code> holds the content of the message. The content of the message depends on the channel.</li></ul><h3 id="sending-a-message-to-a-channel" tabindex="-1"><a class="header-anchor" href="#sending-a-message-to-a-channel" aria-hidden="true">#</a> Sending a message to a channel</h3><p>On some channels, it is also possible to send messages and perform other operations in addition to receiving messages.</p><p>To send a message to a channel, send the following JSON data to the stream:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;channel&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;something&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">some</span><span class="token operator">:</span> <span class="token string">&#39;thing&#39;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>id</code> is the ID that you set when connecting to that channel as mentioned above. This lets you determine which channel (instantiation) the message is for.</li><li><code>type</code> is the type of message. Different channels accept different types of messages.</li><li><code>body</code> contains the content of the message. Different channels accept different message contents.</li></ul><h3 id="disconnecting-from-a-channel" tabindex="-1"><a class="header-anchor" href="#disconnecting-from-a-channel" aria-hidden="true">#</a> Disconnecting from a channel</h3><p>To disconnect from a channel (instantiation), send the following JSON data to the stream:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;disconnect&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>id</code> is the ID that you set when connecting to that channel as mentioned above. This lets you determine which channel (instantiation) you want to disconnect from.</li></ul><h2 id="capturing-notes" tabindex="-1"><a class="header-anchor" href="#capturing-notes" aria-hidden="true">#</a> Capturing Notes</h2><p>Misskey provides a mechanism called note capture. This is the ability to receive a stream of events for a given note.</p><p>For example, let&#39;s say you grab a timeline and display it to your users. Let&#39;s say someone reacts to one of the posts in the timeline. However, since the client has no way of knowing that a note has been reacted to, it is not possible to reflect the reaction in the timeline in real time.</p><p>To solve this problem, Misskey provides a note capture mechanism. When you capture a note, you will receive events related to that note, and you can display reactions to it in real time.</p>`,27),_=e("The following sections describe how to use the note capture function. To see what kind of capture events are available, see the "),j=e("Capture Events List"),T=e("."),I=o(`<h3 id="capturing-a-note" tabindex="-1"><a class="header-anchor" href="#capturing-a-note" aria-hidden="true">#</a> Capturing a Note</h3><p>To capture a note, send the following JSON data to the stream:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;subNote&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxxxxxxxxxxx&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>id</code> is the ID of the note you want to capture.</li></ul><p>When you send this message, you are asking Misskey to capture the note, and events related to that note will then be streamed to you.</p><p>For example, when a note gets a reaction, you will see a message like the following:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;noteUpdated&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxxxxxxxxxxx&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;reacted&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">reaction</span><span class="token operator">:</span> <span class="token string">&#39;like&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token string">&#39;yyyyyyyyyyyyyyyy&#39;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>body.id</code> will be set to the ID of the post that triggered the event.</li><li><code>body.type</code> will be the type of the event.</li><li><code>body.body</code> will contain the details of the event.</li></ul><h3 id="un-capturing-a-note" tabindex="-1"><a class="header-anchor" href="#un-capturing-a-note" aria-hidden="true">#</a> Un-capturing a Note</h3><p>If you no longer want to receive events related to a note, such as when it no longer appears on your screen, you can remove the capture request.</p><p>Send the following JSON data:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;unsubNote&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxxxxxxxxxxx&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where</p><ul><li><code>id</code> is the ID of the note you want to uncapture.</li></ul><p>Once you send this message, no more events related to that note will be sent to you.</p>`,17);function N(D,S){const s=l("RouterLink");return p(),r("div",null,[d,n("div",u,[h,m,n("p",null,[v,a(s,{to:"/ko/docs/api/"},{default:t(()=>[y]),_:1}),k])]),g,n("p",null,[b,a(s,{to:"/ko/docs/api/streaming/channel/"},{default:t(()=>[f]),_:1}),x]),w,n("p",null,[_,a(s,{to:"/ko/docs/api/streaming/note-capture-events.html"},{default:t(()=>[j]),_:1}),T]),I])}var C=i(c,[["render",N],["__file","index.html.vue"]]);export{C as default};
