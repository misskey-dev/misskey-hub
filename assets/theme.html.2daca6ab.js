import{_ as e,o as a,c as n,e as s}from"./app.c1b646c2.js";const t={},o=s(`<h1 id="theme" tabindex="-1"><a class="header-anchor" href="#theme" aria-hidden="true">#</a> Theme</h1><p>You can change the look and feel of the Missky client by applying a theme.</p><h2 id="theme-settings" tabindex="-1"><a class="header-anchor" href="#theme-settings" aria-hidden="true">#</a> Theme Settings</h2><p>Settings &gt; Themes</p><h2 id="creating-a-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-theme" aria-hidden="true">#</a> Creating a Theme</h2><p>The theme object code is written using JSON5. The theme has an object type like the one shown below.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;17587283-dd92-4a2c-a22c-be0637c9e22a&#39;</span><span class="token punctuation">,</span>

	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Danboard&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;syuilo&#39;</span><span class="token punctuation">,</span>

	<span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;light&#39;</span><span class="token punctuation">,</span>

	<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">accent</span><span class="token operator">:</span> <span class="token string">&#39;rgb(218, 141, 49)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">bg</span><span class="token operator">:</span> <span class="token string">&#39;rgb(218, 212, 190)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">fg</span><span class="token operator">:</span> <span class="token string">&#39;rgb(115, 108, 92)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">panel</span><span class="token operator">:</span> <span class="token string">&#39;rgb(236, 232, 220)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">renote</span><span class="token operator">:</span> <span class="token string">&#39;rgb(100, 152, 106)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">&#39;rgb(100, 152, 106)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">mention</span><span class="token operator">:</span> <span class="token string">&#39;@accent&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">hashtag</span><span class="token operator">:</span> <span class="token string">&#39;rgb(100, 152, 106)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token string">&#39;rgba(239, 227, 213, 0.75)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">navBg</span><span class="token operator">:</span> <span class="token string">&#39;rgb(216, 206, 182)&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">inputBorder</span><span class="token operator">:</span> <span class="token string">&#39;rgba(0, 0, 0, 0.1)&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>id</code> ... Unique theme ID. A UUID is recommended.</li><li><code>name</code> ... Theme name</li><li><code>author</code> ... Theme author</li><li><code>desc</code> ... Theme description (Object)</li><li><code>base</code> ... light or dark theme <ul><li>Use <code>light</code> for a light theme and <code>dark</code> for a dark theme.</li><li>The theme inherits the base theme that is set here.</li></ul></li><li><code>props</code> ... Theme style definition. Explained in the following sections.</li></ul><h3 id="theme-style-definition" tabindex="-1"><a class="header-anchor" href="#theme-style-definition" aria-hidden="true">#</a> Theme Style Definition</h3><p>Define the theme style within the <code>props</code>. The keys are the names of CSS variables, and the values specify the contents. Furthermore, this <code>props</code> object inherits from the base theme. The base theme is <a href="https://github.com/misskey-dev/misskey/blob/develop/packages/frontend/src/themes/_light.json5" target="_blank" rel="noopener noreferrer">_light.json5</a> if the <code>base</code> of this theme is <code>light</code> and <a href="https://github.com/misskey-dev/misskey/blob/develop/packages/frontend/src/themes/_dark.json5" target="_blank" rel="noopener noreferrer">_dark.json5</a> if <code>dark</code>. That is, if there is no <code>props</code> key named <code>panel</code> in this theme, then it is set to the <code>panel</code> in the base theme.</p><h4 id="value-syntax" tabindex="-1"><a class="header-anchor" href="#value-syntax" aria-hidden="true">#</a> Value Syntax</h4><ul><li>Colors expressed with hexadecimal <ul><li>example: <code>#00ff00</code></li></ul></li><li>Colors expressed with <code>rgb(r, g, b)</code> format <ul><li>example: <code>rgb(0, 255, 0)</code></li></ul></li><li>Colors that contain alpha/transparency values expressed with <code>rgb(r, g, b, a)</code> format <ul><li>example: <code>rgba(0, 255, 0, 0.5)</code></li></ul></li><li>Other key value reference <ul><li><code>@{key name}</code> is a reference to the value of another key. Replace <code>{key name}</code> with the name of the key you wish to reference.</li><li>example: <code>@panel</code></li></ul></li><li>Constant (discussed below) reference <ul><li><code>\${constant name}</code> is a reference to a constant. Replace <code>{constant name}</code> with the name of the constant you with to reference.</li><li>example: <code>$main</code></li></ul></li><li>Functions (discussed below) <ul><li><code>:{\u95A2\u6570\u540D}&lt;{\u5F15\u6570}&lt;{\u8272}</code></li></ul></li></ul><h4 id="constants" tabindex="-1"><a class="header-anchor" href="#constants" aria-hidden="true">#</a> Constants</h4><p>Constants are useful when you have values that you do not want to output as CSS variables, but want to use as values for other CSS variables.&quot;I don&#39;t want to output it as a CSS variable, but I do want to use it as a value for other CSS variables.</p><h4 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h4><p>WIP</p>`,16),r=[o];function i(l,p){return a(),n("div",null,r)}var d=e(t,[["render",i],["__file","theme.html.vue"]]);export{d as default};
